
pneu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  00000124  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000875  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000045  00000000  00000000  00000895  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000111  00000000  00000000  000008da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000b4  00000000  00000000  000009eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000014a  00000000  00000000  00000a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  00000bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000b7  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000013  00000000  00000000  00000ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00000cf6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  74:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Init_ADC>:
        10 Bit ADC
        Prescalar  = 128
        ADC Freq: 16000000/128 = 125000 Hz
        AREF = AVcc
    */
    ADMUX  = (1<<REFS0);
  7c:	80 e4       	ldi	r24, 0x40	; 64
  7e:	87 b9       	out	0x07, r24	; 7
    ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  80:	87 e8       	ldi	r24, 0x87	; 135
  82:	86 b9       	out	0x06, r24	; 6
}
  84:	08 95       	ret

00000086 <ADC_read>:
//--------------------------------------
/* Read ADC Channel */

uint16_t ADC_read( uint8_t ch)
{
   ADMUX   = ( (ch&0b00000111) | (1<<REFS0) );  //Select ADC Channel ch must be 0-7
  86:	87 70       	andi	r24, 0x07	; 7
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	87 b9       	out	0x07, r24	; 7
   ADCSRA |= (1<<ADSC);                         //Start Single conversion
  8c:	36 9a       	sbi	0x06, 6	; 6
   while( !(ADCSRA & (1<<ADIF)) );              //Wait for conversion to complete
  8e:	34 9b       	sbis	0x06, 4	; 6
  90:	fe cf       	rjmp	.-4      	; 0x8e <ADC_read+0x8>
   ADCSRA |= (1<<ADIF);                         //Clear ADIF by writing one to it
  92:	34 9a       	sbi	0x06, 4	; 6

   return ADC;
  94:	24 b1       	in	r18, 0x04	; 4
  96:	35 b1       	in	r19, 0x05	; 5
}
  98:	c9 01       	movw	r24, r18
  9a:	08 95       	ret

0000009c <main>:
};

int main(void)
{
    /* Initialize IO Pins */
    DDRD = 0xFF;    // UPSHIFT & DOWNSHIFT LEDS PD6, PD7
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	81 bb       	out	0x11, r24	; 17
    DDRC = 0x00;    // Declare Input Port
  a0:	14 ba       	out	0x14, r1	; 20
    PORTC = 0xFF;   // Pull Up
  a2:	85 bb       	out	0x15, r24	; 21

    while(1){

        //val = ADC_read(0);  // Read value from channel 0

        SET( PORTD, 1<<6);
  a4:	96 9a       	sbi	0x12, 6	; 18
		//_delay_ms(200);
        CLR( PORTD, 1<<7);
  a6:	82 b3       	in	r24, 0x12	; 18
  a8:	12 ba       	out	0x12, r1	; 18
  aa:	fc cf       	rjmp	.-8      	; 0xa4 <main+0x8>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
